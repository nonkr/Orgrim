# comments
[global]
# 如果"strict init"是true，zlog_init()将会严格检查所有的格式和规则，任何错误都会导致zlog_init()失败并且返回-1。
# 当"strict init"是false的时候，zlog_init()会忽略错误的格式和规则。这个参数默认为true。
strict init = true

# 这个选项让zlog能在一段时间间隔后自动重载配置文件。重载的间隔以每进程写日志的次数来定义。
# 当写日志次数到了一定值后，内部将会调用zlog_reload()进行重载。每次zlog_reload()或者zlog_init()之后重新计数累加。
# 因为zlog_reload()是原子性的，重载失败继续用当前的配置信息，所以自动重载是安全的。默认值是0，自动重载是关闭的。
# reload conf period

# zlog在堆上为每个线程申请缓存。
# "buffer min"是单个缓存的最小值，zlog_init()的时候申请这个长度的内存。
# 写日志的时候，如果单条日志长度大于缓存，缓存会自动扩充，直到到"buffer max"。
# 单条日志再长超过"buffer max"就会被截断。
# 如果 "buffer max" 是 0，意味着不限制缓存，每次扩充为原先的2倍，直到这个进程用完所有内存为止。
# 缓存大小可以加上 KB, MB 或 GB这些单位。默认来说"buffer min"是 1K ，"buffer max"是2MB。
buffer min = 1024
buffer max = 5KB

# 这个选项指定了一个锁文件，用来保证多进程情况下日志安全转档。zlog会在zlog_init()时候以读写权限打开这个文件。确认你执行程序的用户有权限创建和读写这个文件。
rotate lock file = /tmp/zlog.lock

# 这个参数是缺省的日志格式，默认值为："%d %V [%p:%F:%L] %m%n"
# 这种格式产生的输出类似这样：2012-02-14 17:03:12 INFO [3758:test_hello.c:39] hello, zlog
default format = "%d.%us %-6V (%c:%F:%L) - %m%n"

# 这个指定了创建日志文件的缺省访问权限。必须注意的是最后的产生的日志文件的权限为"file perms"& ~umask。
# 默认为600，只允许当前用户读写。
file perms = 600

# 在每条规则写了一定次数的日志到文件后，zlog会调用fsync(3)来让操作系统马上把数据写到硬盘。
# 次数是每条规则单独统计的，并且在zlog_reload()后会被清0。
# 必须指出的是，在日志文件名是动态生成或者被转档的情况下，zlog不能保证把所有文件都搞定，zlog只fsync()那个时候刚刚write()的文件描述符。
# 这提供了写日志速度和数据安全性之间的平衡。
# 如果你极度在乎安全而不是速度的话，用同步IO文件，见5.5.3。默认值是0，由操作系统来决定什么时候刷缓存到文件。
# fsync period

# 用于定义用户自己的日志等级，建议和用户自定义的日志记录宏一起使用。这一节可以忽略不写。语法为：
# (level string) = (level int), (syslog level, optional)
# (level int)必须在[1,253]这个范围内，越大越重要。(syslog level)是可选的，如果不设默认为LOG_DEBUG。
# [levels]
# TRACE = 10
# CRIT = 130, LOG_CRIT


[formats]
simple = "%m%n"
normal = "%d %m%n"

# (category).(level)    (output), (options, optional); (format name, optional)
[rules]
*.*                     "./a.log", 1KB * 2 ~ "a.log.#s"
